[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "unipercept"
description = "Unified Perception research project"
readme = "README.md"
requires-python = ">=3.10"
keywords = [
    "perception",
    "computer vision",
    "deep learning",
    "object detection",
    "instance segmentation",
    "semantic segmentation"
]
authors = [{ name = "Kurt Stolle", email = "k.h.w.stolle@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython"
]
dependencies = [
    "torch >= 2.0.0",
    "torchvision >= 0.15.1",
    # "detectron2 >= 0.6",
    "unitrack >= 4.6.9",
    "evaluators >= 1.0.1",
    "tensordict >= 0.1.2",
    "einops >= 0.6.1",
    "timm >= 0.6.14",
    "bullet >= 2.2.0",
    "optuna"
]
dynamic = ["version"]

[project.scripts]
unicli = "unicli:__main__"

[tool.setuptools.dynamic]
version = { attr = "unipercept.__version__" }

[tool.setuptools.packages.find]
where = ["sources"]
include = ["*"]
exclude = []

[project.optional-dependencies]
docs = ["sphinx", "sphinx-rtd-theme"]
tests = [
    "hypothesis",
    "bandit[toml]==1.7.4",
    "black==23.1.0",
    "check-manifest==0.48",
    "flake8",
    "flake8-bugbear",
    "flake8-docstrings",
    "flake8-formatter_junit_xml",
    "flake8-pyproject",
    "pre-commit==3.3.1",
    "pylint",
    "pylint_junit",
    "pytest",
    "pytest-xdist",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-mock",
    "pytest-runner",
    "pytest-github-actions-annotate-failures",
    "shellcheck-py==0.9.0.2",
    "pylint",
    "mypy",
    "autoflake",
    "pydocstyle",
    "pyre-check",
    "pydocstringformatter",
    "statistics"
]

[tool.pydocstringformatter]
write = true
strip-whitespaces = true
split-summary-body = false
numpydoc-section-hyphen-length = false

[tool.bandit]
exclude_dirs = [
    "build",
    "dist",
    "tests",
    "scripts",
    "configs",
    "docs",
    "output",
    "datasets",
    "dependencies",
    "benchmarks",
]
number = 4
recursive = true
targets = "sources"

[tool.black]
line-length = 120
fast = true
target-version = ['py311']

[tool.coverage.run]
branch = true

[tool.coverage.report]
fail_under = 100

[tool.flake8]
max-complexity = 50
max-line-length = 120
select = "F,E,W,B,B901,B902,B903"
exclude = [
    ".eggs",
    ".git",
    ".tox",
    "nssm",
    "obj",
    "out",
    "packages",
    "pywin32",
    "tests",
    "swagger_client",
    "*.pyi",
]
ignore = ["E722", "B001", "W503", "E203"]
per-file-ignores = """
    __init__.py: F401, F403
    __init__.pyi: F401, F403
    conftest.py: F401, F403, E402
"""

[tool.pyright]
include = ["sources"]
reportPrivateImportUsage = false
reportMissingImports = true
reportMissingTypeStubs = false
strictListInference = true
strictSetInference = true
reportImportCycles = true
reportMatchNotExhaustive = true
reportShadowedImports = true
reportImplicitOverride = "warning"
pythonVersion = "3.11"
pythonPlatform = "Linux"
exclude = ["datasets", "dependencies", "output", "**/prototypes"]
executionEnvironments = [{ root = "sources" }]

[tool.autoflake]
check = true
exclude = ["configs/**/*"]
imports = [
    "requests",
    "torch",
    "torchvision",
    "tensordict",
    "detectron2",
    "unitrack",
    "unicore",
    "evaluators",
    "tensordict",
    "einops",
    "timm",
]
recursive = true
ignore_init_module_imports = true
expand_star_imports = true

[tool.pytest.ini_options]
addopts = "-m 'not integration' -m 'not gpu'"
pythonpath = ["sources"]
looponfailroots = ["sources", "tests", "configs"]
testpaths = "tests"
junit_family = "xunit2"
junit_suite_name = "tests"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.pylint]
extension-pkg-whitelist = [
    "numpy",
    "torch",
    "cv2",
    "pyodbc",
    "pydantic",
    "ciso8601",
    "netcdf4",
    "scipy",
    "detectron2",
]
ignore = "CVS"
ignore-patterns = "test.*?py,conftest.py"
init-hook = 'import sys; sys.setrecursionlimit(4 * sys.getrecursionlimit())'
jobs = 0
limit-inference-results = 100
persistent = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint.'MESSAGES CONTROL']
enable = "c-extension-no-member"

[tool.pylint.'REPORTS']
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
output-format = "text"
reports = "no"
score = "yes"

[tool.pylint.'REFACTORING']
max-nested-blocks = 5
never-returning-functions = "sys.exit"

[tool.pylint.'BASIC']
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-attribute-naming-style = "any"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
include-naming-hint = "yes"
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "any"
no-docstring-rgx = "^_"
property-classes = "abc.abstractproperty"
variable-naming-style = "snake_case"

[tool.pylint.'FORMAT']
ignore-long-lines = "^\\s*(# )?.*['\"]?<?https?://\\S+>?"
indent-after-paren = 4
indent-string = '    '
max-line-length = 120
max-module-lines = 1000
single-line-class-stmt = "no"
single-line-if-stmt = "no"

[tool.pylint.'LOGGING']
logging-format-style = "old"
logging-modules = "logging"

[tool.pylint.'MISCELLANEOUS']
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.'SIMILARITIES']
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
min-similarity-lines = 7

[tool.pylint.'SPELLING']
max-spelling-suggestions = 4
spelling-store-unknown-words = "no"

[tool.pylint.'STRING']
check-str-concat-over-line-jumps = "no"

[tool.pylint.'TYPECHECK']
contextmanager-decorators = "contextlib.contextmanager"
generated-members = "numpy.*,np.*,pyspark.sql.functions,collect_list"
ignore-mixin-members = "yes"
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
ignored-classes = "optparse.Values,thread._local,_thread._local,numpy,torch,swagger_client"
ignored-modules = "numpy,torch,swagger_client,netCDF4,scipy"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'VARIABLES']
additional-builtins = "dbutils"
allow-global-unused-variables = "yes"
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"
redefining-builtins-modules = "six.moves,past.builtins,future.builtins,builtins,io"

[tool.pylint.'CLASSES']
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = "cls"
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.'DESIGN']
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.'IMPORTS']
allow-wildcard-with-all = "no"
analyse-fallback-blocks = "no"
deprecated-modules = "optparse,tkinter.tix"

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.isort]
multi_line_output = 5
include_trailing_comma = true
force_grid_wrap = 0
line_length = 80
profile = "black"

[tool.mypy]
python_version = "3.11"
strict = true
disallow_untyped_defs = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_optional = true
