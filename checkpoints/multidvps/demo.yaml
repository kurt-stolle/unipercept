data:
  _target_: unipercept.data.DataConfig
  loaders:
    test:
      _target_: unipercept.data.DataLoaderFactory
      actions:
      - {_target_: unipercept.data.ops.CloneOp}
      - _target_: unipercept.data.ops.TorchvisionOp
        transforms:
        - {_target_: torchvision.transforms.v2.Resize, antialias: true, size: 1024}
      config: {_target_: unipercept.data.DataLoaderConfig, drop_last: false, pin_memory: true, prefetch_factor: 10}
      dataset:
        _target_: unipercept.data.sets.cityscapes.CityscapesVPSDataset
        queue_fn:
          _target_: unipercept.data.collect.GroupAdjacentTime
          num_frames: 1
          required_capture_sources: !!set {image: null, panoptic: null}
        split: val
      sampler: {_target_: unipercept.data.SamplerFactory, sampler: inference}
    train:
      _target_: unipercept.data.DataLoaderFactory
      actions:
      - {_target_: unipercept.data.ops.CloneOp}
      - _target_: unipercept.data.ops.TorchvisionOp
        transforms:
        - {_target_: torchvision.transforms.v2.RandomResize, antialias: true, max_size: 1536, min_size: 512}
        - _target_: torchvision.transforms.v2.RandomCrop
          pad_if_needed: false
          size: [512, 1024]
        - {_target_: torchvision.transforms.v2.RandomHorizontalFlip}
      config: {_target_: unipercept.data.DataLoaderConfig, drop_last: true, pin_memory: true, prefetch_factor: 10}
      dataset:
        _target_: unipercept.data.sets.cityscapes.CityscapesVPSDataset
        all: false
        queue_fn:
          _target_: unipercept.data.collect.GroupAdjacentTime
          num_frames: 2
          required_capture_sources: !!set {image: null, panoptic: null}
        split: train
      sampler: {_target_: unipercept.data.SamplerFactory, sampler: training}
model:
  _target_: unimodels.multidvps._model.MultiDVPS.from_metadata
  backbone:
    _target_: unipercept.nn.backbones.fpn.FeaturePyramidBackbone
    base: {_target_: unipercept.nn.backbones.timm.TimmBackbone, name: convnext_small}
    in_features: [ext.1, ext.2, ext.3, ext.4]
    num_hidden: 3
    out_channels: 256
    routing: {_target_: unipercept.nn.backbones.fpn.build_pan_routing, num_levels: 6, weight_method: fastattn}
  common_stride: 4
  dataset_name: cityscapes/vps
  depth_mapper:
    _target_: unimodels.multidvps.modules.DepthHead
    feature_key: depths
    kernel_dims: [32, 256]
    kernel_keys: [depths, masks]
    max_depth: 80.0
  detector:
    _target_: unimodels.multidvps.modules.Detector
    in_features: [fpn.3, fpn.4, fpn.5, fpn.6]
    kernelizer:
      _target_: unimodels.multidvps.modules.Kernelizer
      heads:
        multi:
          _target_: unimodels.multidvps.modules.Encoder
          coord: {_target_: unipercept.nn.layers.CoordCat2d}
          deform: true
          groups: 32
          in_channels: ${.....backbone.out_channels}
          norm: &id001 !!python/name:unipercept.nn.layers.norm.GroupNorm32 ''
          num_convs: 3
          out_channels: 256
    localizer:
      _target_: unimodels.multidvps.modules.Localizer
      encoder:
        _target_: unimodels.multidvps.modules.Encoder
        activation: {_target_: unipercept.nn.layers.utils.wrap_activation, module: !!python/name:torch.nn.modules.activation.GELU ''}
        coord: null
        deform: true
        in_channels: ${....backbone.out_channels}
        norm: *id001
        num_convs: 3
        out_channels: 256
      stuff_channels: 19
      thing_channels: 8
  feature_encoder:
    _target_: unimodels.multidvps.modules.FeatureEncoder
    heads:
      depths: {_target_: unimodels.multidvps.modules.Encoder, coord: null, deform: true, in_channels: 256, norm: *id001, num_convs: 3, out_channels: 32}
      masks: {_target_: unimodels.multidvps.modules.Encoder, coord: null, deform: false, in_channels: 256, norm: *id001, num_convs: 3, out_channels: 256}
    merger: {_target_: unimodels.multidvps.modules.FeatureSelector, name: fpn.1}
    shared_encoder:
      _target_: unimodels.multidvps.modules.Encoder
      coord: {_target_: unipercept.nn.layers.CoordCat2d}
      deform: true
      groups: 1
      in_channels: 256
      norm: *id001
      num_convs: 1
      out_channels: 256
  fusion_stuff:
    _target_: unimodels.multidvps.modules.StuffFusion
    dropout: 0.1
    hidden_dims: 64
    input_dims: 256
    key: multi
    mapping:
      depths: {_target_: unipercept.nn.layers.MapMLP, dropout: 0.1, in_channels: '${...input_dims}', out_channels: 32}
      masks: {_target_: unipercept.nn.layers.MapMLP, dropout: 0.1, in_channels: '${...input_dims}', out_channels: 256}
  fusion_thing:
    _target_: unimodels.multidvps.modules.ThingFusion
    dropout: 0.1
    fusion_threshold: 0.97
    hidden_dims: 64
    input_dims: 256
    key: multi
    mapping:
      depths: {_target_: unipercept.nn.layers.MapMLP, dropout: 0.1, in_channels: '${...input_dims}', out_channels: 32}
      masks: {_target_: unipercept.nn.layers.MapMLP, dropout: 0.1, in_channels: '${...input_dims}', out_channels: 256}
      reids: {_target_: unipercept.nn.layers.MapMLP, dropout: 0.1, in_channels: '${...input_dims}', out_channels: 64}
  inference_pipeline: {_target_: unimodels.multidvps.logic.inference.InferencePipeline, center_thres: 0.01, center_top_num: 200, inst_thres: 0.4, panoptic_inst_thrs: 0.1, panoptic_overlap_thrs: 0.5, panoptic_stuff_limit: 2048, sem_thres: 0.2}
  maskifier_stuff: {_target_: unimodels.multidvps.modules.MaskHead, key: masks}
  maskifier_thing: {_target_: unimodels.multidvps.modules.MaskHead, key: masks}
  tracker: {_target_: unimodels.multidvps.trackers.build_embedding_tracker}
  training_pipeline:
    _target_: unimodels.multidvps.logic.training.TrainingPipeline.from_metadata
    loss_depth_means:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.DepthLoss}
      weight: 1.0
    loss_depth_values:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.DepthLoss}
      weight: 4.0
    loss_dgp:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.DGPLoss}
      weight: 1.0
    loss_location_stuff: {_target_: unipercept.nn.losses.SigmoidFocalLoss, alpha: 0.25, gamma: 1.8}
    loss_location_thing: {_target_: unipercept.nn.losses.SigmoidFocalLoss, alpha: 0.33, gamma: 1.8}
    loss_location_weight: [6.0, 4.0]
    loss_pgt:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.PGTLoss}
      weight: 1.0
    loss_reid:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: torch.nn.TripletMarginLoss}
      weight: 1.0
    loss_segment_stuff:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.WeightedStuffDiceLoss}
      weight: 15.0
    loss_segment_thing:
      _target_: unipercept.nn.losses.WeightedLoss
      loss: {_target_: unipercept.nn.losses.WeightedThingDiceLoss}
      weight: 20.0
    name: cityscapes/vps
    truth_generator: {_target_: unimodels.multidvps.modules.supervision._generator.TruthGenerator.from_metadata, common_stride: 4, gaussian_sigma: 3, ignore_val: -1, min_overlap: 0.7, name: cityscapes/vps}
  weighted_num: 7
trainer:
  _target_: unipercept.trainer.Trainer
  callbacks:
  - {_target_: unipercept.trainer.callbacks.FlowCallback}
  - {_target_: unipercept.trainer.callbacks.ProgressCallback}
  config: {_target_: unipercept.trainer.TrainConfig, eval_epochs: 2, infer_batch_size: 4, project_name: multidvps, save_epochs: 2, session_name: demo, train_batch_size: 1, train_epochs: 100}
  evaluators:
  - {_target_: unipercept.evaluators._depth.DepthEvaluator.from_metadata, name: cityscapes/vps}
  - {_target_: unipercept.evaluators._panoptic.PanopticEvaluator.from_metadata, name: cityscapes/vps}
  optimizer: {_target_: unipercept.trainer.OptimizerFactory, lr: 0.0005, opt: adamw}
  scheduler: {_target_: unipercept.trainer.SchedulerFactory, cooldown_epochs: 0, scd: poly, warmup_epochs: 1}
