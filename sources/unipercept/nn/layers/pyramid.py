import math
from typing import List, Mapping, Optional, Sequence, cast

import torch
import torch.nn as nn
import torch.nn.functional as F
from detectron2.layers import ShapeSpec
from detectron2.modeling.backbone import Backbone
from torch import Tensor
from typing_extensions import override

from ..typings import Norm
from . import conv as convolution
from . import norm
from .weight import init_xavier_fill_

__all__ = ["DetectionFPN", "DepthwiseFPN", "ConvP6P7", "MaxPoolP6"]


class DetectionFPN(Backbone):
    """
    This module implements the baseline Feature Pyramid Network (FPN).
    Paper: https://arxiv.org/abs/1612.03144

    Implementation is based on the official Detectron2 implementation.
    See: https://github.com/facebookresearch/detectron2/blob/main/detectron2/modeling/backbone/fpn.py
    """

    _fuse_type: T.Final[str]

    def __init__(
        self,
        bottom_up,
        in_features,
        out_channels,
        norm: Optional[Norm] = None,
        top_block=None,
        fuse_type="sum",
        square_pad=0,
    ):
        """
        Parameters
        ----------
        bottom_up (Backbone)
            module representing the bottom up subnetwork.
            Must be a subclass of :class:`Backbone`. The multi-scale feature
            maps generated by the bottom up network, and listed in `in_features`,
            are used to generate FPN levels.
        in_features
            names of the input feature maps coming
            from the backbone to which FPN is attached. For example, if the
            backbone produces ["res2", "res3", "res4"], any *contiguous* sublist
            of these may be used; order must be from high to low resolution.
        out_channels
            number of channels in the output feature maps.
        norm
            normalization type
        top_block
            if provided, an extra operation will
            be performed on the output of the last (smallest resolution)
            FPN output, and the result will extend the result list. The top_block
            further downsamples the feature map. It must have an attribute
            "num_levels", meaning the number of extra FPN levels added by
            this block, and "in_feature", which is a string representing
            its input feature (e.g., p5).
        fuse_type
            types for fusing the top down features and the lateral
            ones. It can be "sum" (default), which sums up element-wise; or "avg",
            which takes the element-wise mean of the two
        square_pad
            If > 0, require input images to be padded to specific square size.
        """
        super().__init__()

        assert isinstance(bottom_up, Backbone)
        assert in_features, in_features

        # Feature map strides and channels from the bottom up network (e.g. ResNet)
        input_shapes = bottom_up.output_shape()
        strides: list[int] = [input_shapes[f].stride for f in in_features]  # type: ignore
        in_chan: list[int] = [input_shapes[f].channels for f in in_features]  # type: ignore

        _assert_strides_are_log2_contiguous(strides)
        lateral_convs = []
        output_convs = []

        stage_num: int | None = None
        for idx, (in_channels, stride) in enumerate(zip(in_chan, strides)):
            assert stride is not None
            assert in_channels is not None

            lateral_conv = convolution.Conv2d.with_norm(in_channels, out_channels, kernel_size=1, norm=norm)
            output_conv = convolution.Conv2d.with_norm(
                out_channels,
                out_channels,
                kernel_size=3,
                stride=1,
                padding=1,
                norm=norm,
            )
            init_xavier_fill_(lateral_conv)
            init_xavier_fill_(output_conv)

            stage_num = int(math.log2(stride))

            self.add_module("fpn_lateral{}".format(stage_num), lateral_conv)
            self.add_module("fpn_output{}".format(stage_num), output_conv)

            lateral_convs.append(lateral_conv)
            output_convs.append(output_conv)

        assert stage_num is not None

        # Place convs into top-down order (from low to high resolution)
        # to make the top-down computation in forward clearer.
        self.lateral_convs = lateral_convs[::-1]
        self.output_convs = output_convs[::-1]
        self.top_block = top_block
        self.in_features = tuple(in_features)
        self.bottom_up = bottom_up

        # Return feature names are "p<stage>", like ["p2", "p3", ..., "p6"]
        self._out_feature_strides = {"p{}".format(int(math.log2(s))): s for s in strides}

        # Top block output feature maps.
        if self.top_block is not None:
            for s in range(stage_num, stage_num + self.top_block.num_levels):
                self._out_feature_strides["p{}".format(s + 1)] = 2 ** (s + 1)

        self._out_features = list(self._out_feature_strides.keys())
        self._out_feature_channels = {k: out_channels for k in self._out_features}
        self._size_divisibility = strides[-1]
        self._square_pad = square_pad
        assert fuse_type in {"avg", "sum"}
        self._fuse_type = fuse_type

    @property
    def size_divisibility(self):
        return self._size_divisibility

    @property
    def padding_constraints(self):
        return {"square_size": self._square_pad}

    @override
    def forward(self, x):
        bottom_up_features = self.bottom_up(x)
        results = []
        prev_features = self.lateral_convs[0](bottom_up_features[self.in_features[-1]])
        results.append(self.output_convs[0](prev_features))

        # Reverse feature maps into top-down order (from low to high resolution)
        for idx, (lateral_conv, output_conv) in enumerate(zip(self.lateral_convs, self.output_convs)):
            # Slicing of ModuleList is not supported https://github.com/pytorch/pytorch/issues/47336
            # Therefore we loop over all modules but skip the first one
            if idx > 0:
                features = self.in_features[-idx - 1]
                features = bottom_up_features[features]
                top_down_features = F.interpolate(prev_features, scale_factor=2.0, mode="nearest")
                lateral_features = lateral_conv(features)
                prev_features = lateral_features + top_down_features
                if self._fuse_type == "avg":
                    prev_features /= 2
                results.insert(0, output_conv(prev_features))

        if self.top_block is not None:
            if self.top_block.in_feature in bottom_up_features:
                top_block_in_feature = bottom_up_features[self.top_block.in_feature]
            else:
                top_block_in_feature = results[self._out_features.index(self.top_block.in_feature)]
            results.extend(self.top_block(top_block_in_feature))
        assert len(self._out_features) == len(results)
        return {f: res for f, res in zip(self._out_features, results)}

    def output_shape(self):
        return {
            name: ShapeSpec(channels=self._out_feature_channels[name], stride=self._out_feature_strides[name])
            for name in self._out_features
        }


class ConvP6P7(nn.Module):
    def __init__(self, channels: int, in_feature="res5"):
        super().__init__()

        self.in_feature = in_feature
        self.num_levels = 2

        self.p6, self.p7 = (
            convolution.Conv2d(channels, channels, kernel_size=3, stride=2, padding=1) for _ in range(self.num_levels)
        )

        self.apply(init_xavier_fill_)

    @override
    def forward(self, p5: Tensor) -> List[Tensor]:
        p6 = self.p6(p5)
        p7 = self.p7(F.relu(p6))
        return [p6, p7]


class MaxPoolP6(nn.Module):
    """
    This module is used in the original FPN to generate a downsampled
    P6 feature from P5.
    """

    def __init__(self, channels: int, in_feature="res5"):
        super().__init__()

        self.in_feature = in_feature
        self.num_levels = 2

    @override
    def forward(self, p5):
        return [F.max_pool2d(p5, kernel_size=1, stride=2, padding=0)]


def _assert_strides_are_log2_contiguous(strides):
    """
    Assert that each stride is 2x times its preceding stride, i.e. "contiguous in log2".
    Copied from Detectron2 implementation.
    """
    for i, stride in enumerate(strides[1:], 1):
        assert stride == 2 * strides[i - 1], "Strides {} {} are not log2 contiguous".format(stride, strides[i - 1])
